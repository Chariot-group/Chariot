services:
  mongo:
    networks:
      - integ_net
    image: mongo:8.0.0
    container_name: mongodb
    restart: always
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    command:
      - "--logpath"
      - "/var/log/mongodb/mongod.log"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
    networks:
      - integ_net
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: backend
    restart: always
    working_dir: /app
    ports:
      - "${API_PORT}:${INTERNAL_API_PORT}"
    environment:
      - API_PORT=${API_PORT}
      - MONGO_URL=${MONGO_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_URL=${BACKEND_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - RECEIVER_EMAIL=${RECEIVER_EMAIL}
      - SMTP_PASS=${SMTP_PASS}
      - NODE_ENV=${NODE_ENV}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      mongo:
        condition: service_healthy

  frontend:
    networks:
      - integ_net
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: frontend
    restart: always
    working_dir: /app
    ports:
      - "${FRONT_PORT}:3000"
    depends_on:
      - backend
    environment:
      - BACKEND_URL=${BACKEND_URL}
      - NODE_ENV=${NODE_ENV}

volumes:
  mongodb_data:

networks:
  integ_net: